---
import { SHOW_BUY_BUTTON } from "astro:env/server";
import type { GetStaticPaths } from "astro";
import { getCollection, render } from "astro:content";

import { Icon } from "astro-icon/components";
import Layout from "../../layouts/Layout.astro";
import MovieScore from "../../components/MovieScore.astro";
import BuyButton from "../../components/BuyButton.astro";

export const getStaticPaths = (async () => {
  const movies = await getCollection("movies");

  return movies.map((movie) => ({
    params: {
      id: movie.slug,
    },
    props: { movie },
  }));
}) satisfies GetStaticPaths;

const { movie } = Astro.props;
const { data, slug } = movie;
const { title, director, release, image, description, buy } = data;

const { Content } = await render(movie);

// Set the mode static for this page but with server component
export const prerender = true;
---

<Layout title={`${title} - Movies üìΩÔ∏è`}>
  <div class="flex gap-12">
    <aside class="flex flex-col items-center gap-4">
      <a href="/" class="opacity-70 hover:underline">‚Üê Volver atr√°s</a>
      <img
        transition:name={`image-${slug}`}
        class="h-auto w-72 rounded"
        src={`/${image}`}
        alt={title}
      />
      <!-- <span class="text-xs" id="score"></span> -->
      <!-- Server Island -->
      <MovieScore server:defer id={slug}>
        <!-- Fallback -->
        <span slot="fallback" class="text-xs opacity-70"
          >Cargando puntuaci√≥n...</span
        >
      </MovieScore>
      {SHOW_BUY_BUTTON && <BuyButton server:defer buy={buy} />}
    </aside>
    <main class="max-w-3xl">
      <h1 transition:name={`title-${slug}`} class="mb-4 text-4xl font-bold">
        {title}
      </h1>
      <div class="prose prose-invert">
        <Content />
      </div>
    </main>
  </div>
</Layout>

<!-- <script>
  import { SCORE_API_ENDPOINT } from "astro:env/client";

  const scoreElement = document.getElementById("score");

  fetch(SCORE_API_ENDPOINT)
    .then((response) => response.text())
    .then((scoreValue) => {
      if (scoreElement) {
        scoreElement.innerHTML = `‚≠ê Puntuaci√≥n: ${scoreValue.trim()}/5`;
      }
    });
</script> -->
